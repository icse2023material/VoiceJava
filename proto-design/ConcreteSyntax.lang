
define package name [dot name]
import [Modifier] name [dot name|star] 
define interface name
define [ClassModifier] class name [extends name] [implements name]
define constructor
define [MethodModifier] function functionName [throws Exception]
define [FieldModifier] Type variable name
Type ::= name list | name [dot name] [with name+]

define at override // @Override
define at name // TODO


define [MethodModifier] variable variableName
type typeName [extends typeName]



set variableName|functionalCall to variableName|constant|expression

type typeName name variableName

return exp

functionCall ::= call variableName | variableName [call variableName]

exp ::= functionCall | variableName | constant | attribute

define arrow function

break
continue

new insance ReferenceType


define [enhanced] for
define [do] while
define if 
define switch


define try catch
throw new exceptionName


variableName|constant @compare variableName|constant 
@compare ::= less than 
           | less equal
					 | greater than
					 |  greater equal
					 | double equal 
jump out 
move next

// expression 
// +-*/=
define expression 
variableName | constant @op variableName | constant
@op ::= plus | minus | times | minus | mod | equal
variableName plus plus 
plus plus variableName



string textxxxx