define package Name [dot Name]
import [Modifier] Name [dot Name|star] 
define interface Name
define [ClassModifier] class Name [extends Name] [implements Name]
define constructor
define [MethodModifier] function Name [throws Exception]
define arrow function
define [FieldModifier] Type variable Name
Type ::= Name list | Name [dot Name] [with Name+]

define [MethodModifier] variable Name
type Name [extends Name]
type Name variable Name

define [enhanced] for
define [do] while
define if 
define switch

define try catch

define at override // @Override
define at name // TODO

let Name [dot Name] equal Expression
return Expression
Expression = [expression] Exp
Exp ::= functionCall | Name | [variable] Name | Constant  
			| Exp @op Exp
      | Exp @compare Exp
			| Name plus plus 
			| plus plus Name
      | Name minus minus
      | minus minus Name
functionCall ::= call Name | Name [call Name]+

@op ::= plus | minus | times | divide | mod

@compare ::= less than 
           | less equal
					 | greater than
					 | greater equal
					 | double equal 
					 | and 
					 | doube and

Constant ::= TypeName value
TypeName ::= int | byte | short | long | char | float | double | boolean | String
	
subexpression // ()

break
continue
new insance ReferenceType
throw new name // exception name

// navigation				 
Navigation ::= move next | jump out
             | jump before name 
						 | jump after name
             | jump to line number [start | end]
						 | jump to line end
             | up [number lines] 
             | down [number lines] 
						 | left 
						 | right 

Selection ::= select name | select line | select body | select function [Name]
Editing ::= replace name to name 
          | delete
